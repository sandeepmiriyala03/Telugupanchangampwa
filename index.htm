<!DOCTYPE html>
<html lang="te">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>తెలుగు పంచాంగం జనరేటర్</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <link rel="manifest" href="/manifest.json">
    <style>
        /* Base styles using Inter font */
        body {
            font-family: 'Inter', sans-serif;
            background-color: #e0f2f7; /* Lighter, calming blue background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
            color: #263238; /* Dark blue-gray for general text */
        }
        .container {
            background-color: #ffffff;
            padding: 35px; /* Increased padding */
            border-radius: 20px; /* Even more rounded corners */
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15); /* Stronger, softer shadow */
            max-width: 650px; /* Slightly wider container */
            width: 100%;
            text-align: center;
            border: 1px solid #cfd8dc; /* Subtle border */
        }
        h1 {
            color: #00796b; /* Teal color for main title */
            margin-bottom: 30px; /* More space below title */
            font-size: 2.5rem; /* Larger title */
            font-weight: 800; /* Extra bold */
            letter-spacing: -0.02em; /* Tighter letter spacing for impact */
        }
        .input-group {
            display: flex;
            justify-content: center;
            gap: 20px; /* Increased gap between selects */
            margin-bottom: 30px; /* More space below inputs */
            flex-wrap: wrap;
        }
        select {
            appearance: none; /* Remove default arrow */
            -webkit-appearance: none;
            -moz-appearance: none;
            padding: 14px 22px; /* More padding */
            border: 2px solid #b0bec5; /* Slightly darker border */
            border-radius: 12px; /* More rounded select boxes */
            font-size: 1.1rem; /* Slightly larger font */
            color: #455a64; /* Darker text for selects */
            background-color: #f5f5f5; /* Light gray background */
            cursor: pointer;
            transition: all 0.3s ease-in-out; /* Smoother transitions */
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' fill='currentColor'%3E%3Cpath fill-rule='evenodd' d='M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z' clip-rule='evenodd'/%3E%3C/svg%3E"); /* Custom SVG arrow */
            background-repeat: no-repeat;
            background-position: right 1rem center;
            background-size: 1.2em;
        }
        select:hover {
            border-color: #78909c; /* Darker border on hover */
            background-color: #eceff1; /* Slightly darker background on hover */
        }
        select:focus {
            outline: none;
            border-color: #00796b; /* Teal focus border */
            box-shadow: 0 0 0 4px rgba(0, 121, 107, 0.3); /* Teal glow on focus */
            background-color: #e0f2f7; /* Light blue on focus */
        }
        .main-button {
            background-color: #00796b; /* Teal button */
            color: white;
            padding: 16px 32px; /* Even larger button */
            border-radius: 12px;
            border: none;
            cursor: pointer;
            font-size: 1.2rem; /* Larger font */
            font-weight: 700; /* Bold */
            transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
            box-shadow: 0 6px 15px rgba(0, 121, 107, 0.4); /* Teal shadow */
            margin-top: 20px; /* Added margin */
            letter-spacing: 0.02em;
        }
        .main-button:hover {
            background-color: #004d40; /* Darker teal on hover */
            transform: translateY(-3px); /* More pronounced lift */
            box-shadow: 0 8px 20px rgba(0, 121, 107, 0.5); /* Stronger shadow on hover */
        }
        .main-button:active {
            transform: translateY(0);
            box-shadow: 0 3px 8px rgba(0, 121, 107, 0.3);
        }

        #output {
            margin-top: 35px; /* More space above output */
            padding: 25px; /* More padding */
            background-color: #f0f4f7; /* Very light blue-gray background for output */
            border-radius: 12px;
            text-align: left;
            color: #37474f; /* Darker text */
            line-height: 1.9; /* Better readability */
            font-size: 1.15rem; /* Slightly larger font */
            min-height: 120px; /* Ensure it has some height even when empty */
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
            border: 1px dashed #b0bec5; /* Dashed border for a distinct look */
            box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.05); /* Inner shadow for depth */
        }
        #output p {
            font-weight: 500; /* Medium weight for output text */
        }

        .disclaimer {
            margin-top: 25px; /* More space above disclaimer */
            font-size: 0.95rem; /* Slightly larger font for disclaimer */
            color: #78909c; /* Lighter gray text for disclaimer */
            line-height: 1.5;
        }

        /* Install App Button Specific Styling */
        #installAppButton {
            background-color: #2196f3; /* Bright blue for install button */
            box-shadow: 0 6px 15px rgba(33, 150, 243, 0.4);
            margin-bottom: 10px; /* Space below if it appears */
            display: none; /* Hidden by default */
        }
        #installAppButton:hover {
            background-color: #1976d2; /* Darker blue on hover */
            box-shadow: 0 8px 20px rgba(33, 150, 243, 0.5);
        }

        /* Responsive adjustments */
        @media (max-width: 640px) {
            .container {
                padding: 25px;
                border-radius: 15px;
            }
            h1 {
                font-size: 2rem;
                margin-bottom: 25px;
            }
            .input-group {
                flex-direction: column;
                gap: 15px;
            }
            select, .main-button {
                width: 100%;
            }
            select {
                padding: 12px 18px;
                font-size: 1rem;
            }
            .main-button {
                padding: 14px 28px;
                font-size: 1.1rem;
            }
            #output {
                padding: 20px;
                font-size: 1rem;
            }
            .disclaimer {
                font-size: 0.85rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>తెలుగు పంచాంగం జనరేటర్</h1>
        <div class="input-group">
            <select id="daySelect"></select>
            <select id="monthSelect"></select>
            <select id="yearSelect"></select>
        </div>
        <button class="main-button" onclick="generatePanchangam()">పంచాంగం రూపొందించండి</button>
        <button id="installAppButton" class="main-button">యాప్‌ను ఇన్‌స్టాల్ చేయండి</button>

        <div id="output">
            <p>తేదీని ఎంచుకుని, 'పంచాంగం రూపొందించండి' బటన్‌ను నొక్కండి.</p>
        </div>
        <p class="disclaimer">
            గమనిక: ఇది ఒక సరళీకృత పంచాంగం జనరేటర్. ఖచ్చితమైన ఖగోళ గణనలు లేకుండా తిథి, నక్షత్రం, యోగం, తెలుగు మాసం వంటివి సుమారుగా మాత్రమే చూపబడతాయి.
            <br>
            సందీప్ మిరియాల ద్వారా AI ఉపయోగించి రూపొందించబడింది.
        </p>
    </div>

    <script>
        // Get references to HTML elements
        const daySelect = document.getElementById('daySelect');
        const monthSelect = document.getElementById('monthSelect');
        const yearSelect = document.getElementById('yearSelect');
        const outputDiv = document.getElementById('output');
        const installAppButton = document.getElementById('installAppButton'); // Reference to the install button

        let deferredPrompt; // To store the beforeinstallprompt event

        // Telugu month names (global scope)
        const months = [
            'జనవరి', 'ఫిబ్రవరి', 'మార్చి', 'ఏప్రిల్', 'మే', 'జూన్',
            'జూలై', 'ఆగస్టు', 'సెప్టెంబర్', 'అక్టోబర్', 'నవంబర్', 'డిసెంబర్'
        ];

        // Populate day, month, and year dropdowns
        function populateDateSelectors() {
            // Populate days (1-31)
            for (let i = 1; i <= 31; i++) {
                const option = document.createElement('option');
                option.value = i;
                option.textContent = i;
                daySelect.appendChild(option);
            }

            // Populate months (0-11 for Date object)
            months.forEach((month, index) => {
                const option = document.createElement('option');
                option.value = index; // Month index (0-11)
                option.textContent = month;
                monthSelect.appendChild(option);
            });

            // Populate years (100 years past, 100 years future from current)
            const currentYear = new Date().getFullYear();
            const startYear = currentYear - 100;
            const endYear = currentYear + 100;
            for (let i = startYear; i <= endYear; i++) {
                const option = document.createElement('option');
                option.value = i;
                option.textContent = i;
                yearSelect.appendChild(option);
            }

            // Set current date as default
            const today = new Date();
            daySelect.value = today.getDate();
            monthSelect.value = today.getMonth();
            yearSelect.value = today.getFullYear();
        }

        // Telugu day names
        const teluguDayNames = [
            'ఆదివారం', 'సోమవారం', 'మంగళవారం', 'బుధవారం',
            'గురువారం', 'శుక్రవారం', 'శనివారం'
        ];

        // Telugu Samvatsara (60-year cycle)
        // Base year for Prabhava is 1987.
        const samvatsaraNames = [
            'ప్రభవ', 'విభవ', 'శుక్ల', 'ప్రమోదూత', 'ప్రజోత్పత్తి', 'అంగీరస', 'శ్రీముఖ',
            'భావ', 'యువ', 'ధాత', 'ఈశ్వర', 'బహుధాన్య', 'ప్రమాది', 'విక్రమ', 'వృష',
            'చిత్రభాను', 'స్వభాను', 'తారణ', 'పార్థివ', 'వ్యయ', 'సర్వజిత్', 'సర్వధారి',
            'విరోధి', 'వికృతి', 'ఖర', 'నందన', 'విజయ', 'జయ', 'మన్మథ', 'దుర్ముఖి',
            'హేవిళంబి', 'విళంబి', 'వికారి', 'శార్వరి', 'ప్లవ', 'శుభకృత్', 'శోభకృత్',
            'క్రోధి', 'విశ్వావసు', 'పరాభవ', 'ప్లవంగ', 'కీలక', 'సౌమ్య', 'సాధారణ',
            'విరోధికృత్', 'పరీధావి', 'ప్రమాదీచ', 'ఆనంద', 'రాక్షస', 'నల', 'పింగళ',
            'కాళయుక్తి', 'సిద్ధార్థి', 'రౌద్రి', 'దుర్మతి', 'దుందుభి', 'రుధిరోద్గారి',
            'రక్తాక్షి', 'క్రోధన', 'క్షయ'
        ];

        function getTeluguSamvatsara(year) {
            const baseYear = 1987; // Prabhava started in 1987 (approximate for calculation)
            const index = (year - baseYear) % 60;
            return samvatsaraNames[index < 0 ? index + 60 : index]; // Handle negative results for past years
        }

        // Simplified Rahukalam based on day of the week
        // Note: Actual Rahukalam varies by sunrise/sunset and location. This is a fixed approximation.
        const rahukalamTimes = {
            0: 'సాయంత్రం 4:30 నుండి 6:00 వరకు', // Sunday
            1: 'ఉదయం 7:30 నుండి 9:00 వరకు',    // Monday
            2: 'మధ్యాహ్నం 3:00 నుండి 4:30 వరకు', // Tuesday
            3: 'మధ్యాహ్నం 12:00 నుండి 1:30 వరకు', // Wednesday
            4: 'మధ్యాహ్నం 1:30 నుండి 3:00 వరకు', // Thursday
            5: 'ఉదయం 10:30 నుండి 12:00 వరకు',   // Friday
            6: 'ఉదయం 9:00 నుండి 10:30 వరకు'    // Saturday
        };

        // Simplified Telugu Month names (mapping Gregorian to approximate Telugu lunar month)
        // This is a very rough approximation and not astronomically accurate.
        const simplifiedTeluguMonths = [
            'పుష్యమాసం', 'మాఘమాసం', 'ఫాల్గుణమాసం', 'చైత్రమాసం',
            'వైశాఖమాసం', 'జ్యేష్ఠమాసం', 'ఆషాఢమాసం', 'శ్రావణమాసం',
            'భాద్రపదమాసం', 'ఆశ్వయుజమాసం', 'కార్తీకమాసం', 'మార్గశిరమాసం'
        ];

        // Simplified Tithis (Lunar Days)
        // This is a very rough approximation based on day of month.
        const tithiNames = [
            'పాడ్యమి', 'విదియ', 'తదియ', 'చవితి', 'పంచమి', 'షష్ఠి', 'సప్తమి',
            'అష్టమి', 'నవమి', 'దశమి', 'ఏకాదశి', 'ద్వాదశి', 'త్రయోదశి', 'చతుర్దశి',
            'పౌర్ణమి', // Full Moon (15th tithi of Shukla Paksha)
            'పాడ్యమి', 'విదియ', 'తదియ', 'చవితి', 'పంచమి', 'షష్ఠి', 'సప్తమి',
            'అష్టమి', 'నవమి', 'దశమి', 'ఏకాదశి', 'ద్వాదశి', 'త్రయోదశి', 'చతుర్దశి',
            'అమావాస్య' // New Moon (15th tithi of Krishna Paksha)
        ];

        // Simplified Nakshatras (Lunar Mansions)
        // This is a very rough approximation based on day of month.
        const nakshatraNames = [
            'అశ్విని', 'భరణి', 'కృత్తిక', 'రోహిణి', 'మృగశిర', 'ఆరుద్ర', 'పునర్వసు',
            'పుష్యమి', 'ఆశ్లేష', 'మఖ', 'పూర్వ ఫల్గుణి', 'ఉత్తర ఫల్గుణి', 'హస్త',
            'చిత్త', 'స్వాతి', 'విశాఖ', 'అనురాధ', 'జ్యేష్ఠ', 'మూల', 'పూర్వాషాఢ',
            'ఉత్తరాషాఢ', 'శ్రవణం', 'ధనిష్ఠ', 'శతభిషం', 'పూర్వ భాద్రపద',
            'ఉత్తర భాద్రపద', 'రేవతి'
        ];

        // Simplified Yogas
        // This is a very rough approximation based on day of month.
        const yogaNames = [
            'విష్కంభం', 'ప్రీతి', 'ఆయుష్మాన్', 'సౌభాగ్య', 'శోభన', 'అతిగండ',
            'సుకర్మ', 'ధృతి', 'శూల', 'గండ', 'వృద్ధి', 'ధృవ', 'వ్యాఘాత',
            'హర్షణ', 'వజ్ర', 'సిద్ధి', 'వ్యతీపాత', 'వరీయాన్', 'పరిఘ', 'శివ',
            'సిద్ధ', 'సాధ్య', 'శుభ', 'శుక్ల', 'బ్రహ్మ', 'ఐంద్ర', 'వైధృతి'
        ];

        // Function to generate Panchangam
        function generatePanchangam() {
            const day = parseInt(daySelect.value);
            const month = parseInt(monthSelect.value); // 0-indexed
            const year = parseInt(yearSelect.value);

            const selectedDate = new Date(year, month, day);

            // Get day of the week in Telugu
            const dayOfWeekIndex = selectedDate.getDay(); // 0 for Sunday, 6 for Saturday
            const teluguDay = teluguDayNames[dayOfWeekIndex];

            // Get Samvatsara
            const teluguSamvatsara = getTeluguSamvatsara(year);

            // Get simplified Rahukalam
            const rahukalam = rahukalamTimes[dayOfWeekIndex];

            // Get simplified Telugu month (approximation)
            const teluguMonth = simplifiedTeluguMonths[month];

            // Determine Paksham (Shukla/Krishna - waxing/waning) based on day of month
            // This is a very basic approximation.
            const paksham = day <= 15 ? 'శుద్ధ' : 'బహుళ';

            // Get simplified Tithi (approximation)
            // For simplicity, map day 1-15 to 1-15 tithis, and day 16-30 to 1-15 tithis again.
            // If day is 15, it's Pournami (Full Moon). If day is 30, it's Amavasya (New Moon).
            let tithiIndex = (day - 1) % 15;
            let tithi = tithiNames[tithiIndex];
            if (day === 15) {
                tithi = tithiNames[14]; // Pournami
            } else if (day === new Date(year, month + 1, 0).getDate()) { // Last day of month is Amavasya
                tithi = tithiNames[29]; // Amavasya (index 29 in the combined list)
            }


            // Get simplified Nakshatra (approximation)
            const nakshatraIndex = (day - 1) % nakshatraNames.length;
            const nakshatra = nakshatraNames[nakshatraIndex];

            // Get simplified Yoga (approximation)
            const yogaIndex = (day - 1) % yogaNames.length;
            const yoga = yogaNames[yogaIndex];

            // Format the date for display
            const formattedDate = `${day} ${months[month]}, ${year}`;

            // Construct the output string in Telugu
            const outputText = `
                ఈరోజు, ${formattedDate}, తెలుగు పంచాంగం ప్రకారం, ${teluguDay}, శ్రీ ${teluguSamvatsara} నామ సంవత్సరంలో ${teluguMonth}, ${paksham} ${tithi}.
                ఈ రోజున ${nakshatra} నక్షత్రం మరియు ${yoga} యోగం ఉన్నాయి.
                రాహుకాలం ${rahukalam} వరకు ఉంటుంది.
            `;

            outputDiv.innerHTML = `<p>${outputText.trim()}</p>`;
        }

        // Initialize selectors on page load
        window.onload = populateDateSelectors;

        // Service Worker Registration
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                console.log('Attempting to register Service Worker from:', window.location.origin + '/service-worker.js');
                navigator.serviceWorker.register('/service-worker.js')
                    .then(registration => {
                        console.log('Service Worker registered: ', registration);
                    })
                    .catch(error => {
                        console.error('Service Worker registration failed: ', error);
                        console.error('This often happens if the app is not served over HTTPS or a valid local server.');
                    });
            });
        }

        // --- PWA Install App Popup Logic ---
        window.addEventListener('beforeinstallprompt', (e) => {
            // Prevent the default mini-infobar from appearing on mobile
            e.preventDefault();
            // Stash the event so it can be triggered later.
            deferredPrompt = e;
            // Update UI to notify the user they can install the PWA
            installAppButton.style.display = 'block'; // Show the custom install button
            console.log('\'beforeinstallprompt\' event was fired.');
        });

        installAppButton.addEventListener('click', async () => {
            if (deferredPrompt) {
                // Hide the install button as it will be used now
                installAppButton.style.display = 'none';

                // Show the install prompt
                deferredPrompt.prompt();

                // Wait for the user to respond to the prompt
                const { outcome } = await deferredPrompt.userChoice;
                console.log(`User response to the install prompt: ${outcome}`);

                // We've used the prompt, so set deferredPrompt to null
                deferredPrompt = null;

                // Optionally, hide the button again if the user dismisses it or installs
                // (the 'appinstalled' event can also handle hiding after a successful install)
                if (outcome === 'accepted') {
                    console.log('App was installed');
                } else {
                    console.log('App installation dismissed');
                }
            }
        });

        window.addEventListener('appinstalled', () => {
            // Hide the install button if the app is successfully installed
            installAppButton.style.display = 'none';
            deferredPrompt = null; // Clear the prompt reference
            console.log('PWA was installed via custom prompt or browser UI');
        });
        // --- End PWA Install App Popup Logic ---

    </script>
</body>
</html>